/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sudokuhex;


import static java.lang.Math.random;
import static java.lang.StrictMath.random;
import java.util.Random;

/**
 *
 * @author Roy Soldin
 */
public class GameBoard {
    /* Array that will contain the complete solution to the board */
	private int[][] solution;
	/* Array that will contain ONLY the numbers initially drawn on the board and that the player can't change */
	private int[][] initial;
	/* Array that will contain player's numbers */
	private int[][] demo;
	private int[][] medium;
	private int[][] hard;
	private int[][] player;
	private int[][] easy;
        

	public GameBoard() {
		solution = new int[][]
		{
			{0xA,0xB,0xE,0x8,0x0,0x1,0x6,0xF,0x7,0xD,0x2,0x5,0x9,0x4,0x3,0xC},
			{0x6,0x1,0x0,0x9,0x7,0xC,0xE,0x2,0xF,0x8,0x4,0x3,0xD,0xA,0xB,0x5},
			{0x5,0xC,0x7,0xD,0x9,0x4,0x8,0x3,0xB,0x6,0x1,0xA,0xE,0xF,0x0,0x2},
			{0xF,0x2,0x3,0x4,0xA,0xB,0xD,0x5,0x0,0xC,0xE,0x9,0x7,0x1,0x8,0x6},
                        
			{0x2,0x0,0x1,0xE,0xF,0x6,0x9,0x4,0x5,0xA,0xC,0x8,0xB,0x7,0xD,0x3},
			{0xD,0x8,0x4,0xB,0xC,0xA,0x5,0x0,0x2,0x3,0xF,0x7,0x6,0xE,0x1,0x9},
			{0xC,0x7,0x5,0xF,0x3,0xE,0xB,0x8,0xD,0x9,0x6,0x1,0xA,0x2,0x4,0x0},
			{0x9,0x3,0x6,0xA,0x2,0xD,0x1,0x7,0x4,0xE,0xB,0x0,0x8,0x5,0xC,0xF},
                        
			{0xE,0x6,0x9,0x1,0xB,0x0,0x2,0xA,0xC,0xF,0xD,0x4,0x5,0x3,0x7,0x8},
                        {0xB,0xF,0x2,0x0,0x4,0x5,0x3,0x9,0x1,0x7,0x8,0xE,0xC,0xD,0x6,0xA},
                        {0x4,0xA,0xC,0x5,0xD,0x8,0x7,0x1,0x3,0x2,0x0,0x6,0xF,0x9,0xE,0xB},
                        {0x3,0xD,0x8,0x7,0xE,0xF,0xC,0x6,0xA,0x5,0x9,0xB,0x1,0x0,0x2,0x4},
                        
                        {0x7,0xE,0xD,0x6,0x5,0x9,0x4,0xB,0x8,0x0,0x3,0xF,0x2,0xC,0xA,0x1},
                        {0x1,0x5,0xB,0x3,0x6,0x2,0xF,0xC,0xE,0x4,0xA,0xD,0x0,0x8,0x9,0x7},
                        {0x8,0x4,0xA,0x2,0x1,0x7,0x0,0xE,0x9,0xB,0x5,0xC,0x3,0x6,0xF,0xD},
                        {0x0,0x9,0xF,0xC,0x8,0x3,0xA,0xD,0x6,0x1,0x7,0x2,0x4,0xB,0x5,0xE}
		};
                
                demo = new int[][]
                {
			{69,0xB,0xE,0x8,0x0,0x1,0x6,0xF,0x7,0xD,0x2,0x5,0x9,0x4,0x3,0xC},
			{0x6,0x1,0x0,0x9,0x7,0xC,0xE,0x2,0xF,0x8,0x4,0x3,0xD,0xA,0xB,0x5},
			{0x5,0xC,0x7,0xD,0x9,0x4,0x8,0x3,0xB,0x6,0x1,0xA,0xE,0xF,0x0,0x2},
			{0xF,0x2,0x3,0x4,0xA,0xB,0xD,0x5,0x0,0xC,0xE,0x9,0x7,0x1,0x8,0x6},
                        
			{0x2,0x0,0x1,0xE,0xF,0x6,0x9,0x4,0x5,0xA,0xC,0x8,0xB,0x7,0xD,0x3},
			{0xD,0x8,0x4,0xB,0xC,0xA,0x5,0x0,0x2,0x3,0xF,0x7,0x6,0xE,0x1,0x9},
			{0xC,0x7,0x5,0xF,0x3,0xE,0xB,0x8,0xD,0x9,0x6,0x1,0xA,0x2,0x4,0x0},
			{0x9,0x3,0x6,0xA,0x2,0xD,0x1,0x7,0x4,0xE,0xB,0x0,0x8,0x5,0xC,0xF},
                        
			{0xE,0x6,0x9,0x1,0xB,0x0,0x2,0xA,0xC,0xF,0xD,0x4,0x5,0x3,0x7,0x8},
                        {0xB,0xF,0x2,0x0,0x4,0x5,0x3,0x9,0x1,0x7,0x8,0xE,0xC,0xD,0x6,0xA},
                        {0x4,0xA,0xC,0x5,0xD,0x8,0x7,0x1,0x3,0x2,0x0,0x6,0xF,0x9,0xE,0xB},
                        {0x3,0xD,0x8,0x7,0xE,0xF,0xC,0x6,0xA,0x5,0x9,0xB,0x1,0x0,0x2,0x4},
                        
                        {0x7,0xE,0xD,0x6,0x5,0x9,0x4,0xB,0x8,0x0,0x3,0xF,0x2,0xC,0xA,0x1},
                        {0x1,0x5,0xB,0x3,0x6,0x2,0xF,0xC,0xE,0x4,0xA,0xD,0x0,0x8,0x9,0x7},
                        {0x8,0x4,0xA,0x2,0x1,0x7,0x0,0xE,0x9,0xB,0x5,0xC,0x3,0x6,0xF,0xD},
                        {0x0,0x9,0xF,0xC,0x8,0x3,0xA,0xD,0x6,0x1,0x7,0x2,0x4,0xB,0x5,0xE}
		};
                
                medium = new int[][]
                {
			{0xA,69,0xE,0x8,69,0x1,0x6,0xF,69,0xD,0x2,0x5,0x9,69,69,0xC},
			{69,0x1,0x0,69,0x7,0xC,0xE,69,0xF,0x8,0x4,69,0xD,69,69,0x5},
			{69,69,69,0xD,0x9,69,69,0x3,69,69,0x1,69,0xE,69,0x0,0x2},
			{69,69,0x3,69,0xA,69,0xD,0x5,69,0xC,69,0x9,0x7,0x1,69,0x6},
                        
			{0x2,0x0,69,69,0xF,0x6,69,69,0x5,0xA,69,0x8,0xB,0x7,69,0x3},
			{0xD,69,0x4,69,0xC,0xA,69,69,69,69,0xF,0x7,0x6,0xE,69,0x9},
			{0xC,69,0x5,0xF,0x3,0xE,0xB,0x8,0xD,0x9,0x6,69,0xA,0x2,0x4,69},
			{0x9,69,0x6,69,0x2,0xD,69,69,69,69,0xB,69,0x8,0x5,0xC,69},
                        
			{69,69,69,0x1,0xB,0x0,0x2,69,0xC,0xF,0xD,0x4,69,0x3,0x7,69},
                        {0xB,0xF,69,0x0,0x4,69,0x3,0x9,69,0x7,0x8,69,0xC,69,0x6,69},
                        {69,0xA,69,0x5,0xD,69,0x7,0x1,0x3,69,0x0,69,0xF,0x9,69,0xB},
                        {69,69,69,0x7,0xE,0xF,0xC,0x6,0xA,0x5,69,0xB,0x1,0x0,0x2,69},
                        
                        {69,0xE,0xD,69,0x5,0x9,0x4,0xB,0x8,69,0x3,0xF,69,0xC,69,0x1},
                        {0x1,69,0xB,69,0x6,0x2,0xF,69,69,0x4,0xA,0xD,0x0,0x8,0x9,69},
                        {69,0x4,0xA,69,0x1,0x7,0x0,69,0x9,0xB,69,0xC,69,0x6,69,0xD},
                        {69,0x9,0xF,69,69,0x3,0xA,0xD,0x6,0x1,0x7,0x2,0x4,0xB,0x5,69}
		};
                
                hard = new int[][]
                {  
			{0xA,69,0xE,0x8,69,0x1,0x6,0xF,69,0xD,0x2,0x5,0x9,69,69,0xC},
			{69,0x1,0x0,69,0x7,0xC,0xE,69,0xF,69,69,69,0xD,69,69,69},
			{69,69,69,0xD,0x9,69,69,0x3,69,69,0x1,69,0xE,69,0x0,0x2},
			{69,69,0x3,69,69,69,0xD,0x5,69,69,69,0x9,0x7,69,69,0x6},
                        
			{69,0x0,69,69,0xF,0x6,69,69,0x5,0xA,69,0x8,69,0x7,69,0x3},
			{69,69,0x4,69,69,0xA,69,69,69,69,69,0x7,69,0xE,69,0x9},
			{0xC,69,0x5,69,0x3,0xE,69,69,0xD,69,69,69,0xA,0x2,0x4,69},
			{69,69,0x6,69,69,0xD,69,69,69,69,0xB,69,0x8,0x5,0xC,69},
                        
			{69,69,69,0x1,69,69,69,69,0xC,0xF,0xD,0x4,69,0x3,0x7,69},
                        {0xB,0xF,69,0x0,0x4,69,69,0x9,69,0x7,69,69,0xC,69,69,69},
                        {69,69,69,0x5,0xD,69,69,0x1,0x3,69,0x0,69,0xF,69,69,0xB},
                        {69,69,69,0x7,69,69,69,0x6,0xA,69,69,69,0x1,0x0,0x2,69},
                        
                        {69,0xE,69,69,0x5,0x9,69,0xB,0x8,69,0x3,0xF,69,0xC,69,0x1},
                        {0x1,69,0xB,69,69,0x2,69,69,69,0x4,0xA,0xD,0x0,0x8,69,69},
                        {69,0x4,69,69,0x1,69,69,69,0x9,0xB,69,0xC,69,69,69,69},
                        {69,69,69,69,69,0x3,69,69,0x6,0x1,69,69,69,69,0x5,69}
		};

		// 69's will be rendered as empty space and will be editable by player
		easy = new int[][]
		{
			{69,0xB,0xE,0x8,0x0,0x1,0x6,0xF,0x7,69,0x2,0x5,0x9,0x4,0x3,69},
			{0x6,0x1,0x0,0x9,0x7,0xC,69,0x2,0xF,0x8,0x4,0x3,0xD,69,0xB,0x5},
			{0x5,0xC,0x7,69,0x9,0x4,0x8,0x3,0xB,0x6,0x1,69,0xE,0xF,69,69},
			{0xF,0x2,0x3,0x4,69,0xB,0xD,0x5,0x0,0xC,69,0x9,0x7,0x1,69,69},
                        
			{0x2,0x0,0x1,0xE,0xF,0x6,69,0x4,0x5,0xA,69,0x8,0xB,0x7,0xD,0x3},
			{0xD,0x8,69,0xB,69,0xA,0x5,0x0,0x2,0x3,69,0x7,0x6,0xE,0x1,0x9},
			{0xC,69,0x5,0xF,0x3,69,0xB,0x8,0xD,0x9,69,0x1,0xA,0x2,0x4,69},
			{0x9,0x3,0x6,69,0x2,69,0x1,0x7,0x4,0xE,0xB,0x0,0x8,0x5,69,0xF},
                        
			{69,0x6,0x9,0x1,69,0x0,0x2,0xA,0xC,0xF,0xD,0x4,0x5,69,0x7,0x8},
                        {69,0xF,0x2,0x0,0x4,0x5,0x3,0x9,0x1,0x7,69,0xE,0xC,0xD,0x6,69},
                        {69,0xA,0xC,0x5,0xD,69,0x7,0x1,0x3,69,0x0,0x6,0xF,0x9,0xE,0xB},
                        {0x3,69,0x8,0x7,0xE,69,0xC,0x6,0xA,0x5,69,0xB,0x1,0x0,0x2,0x4},
                        
                        {0x7,69,0xD,0x6,69,0x9,0x4,69,0x8,0x0,0x3,0xF,0x2,0xC,69,69},
                        {0x1,0x5,69,0x3,0x6,69,0xF,69,0xE,0x4,0xA,0xD,0x0,0x8,69,0x7},
                        {0x8,0x4,0xA,0x2,0x1,69,0x0,69,0x9,0xB,69,0xC,0x3,0x6,69,0xD},
                        {0x0,69,0xF,0xC,0x8,0x3,0xA,69,0x6,69,0x7,69,0x4,0xB,69,0xE}
		};

		// player's array is initialized as a 16*16 full of 69's
		player = new int[16][16];
                for(int i=0 ; i<16 ; i++){
                    for(int j=0 ; j<16 ; j++){
                        player[i][j] = 69;
                    }
                }
                
                initial = easy;
	}
        
        public void randomBoards(){
            int max=3;
            int min=0;
            Random rand = new Random();
            int numberOfShuffels = (rand.nextInt(max - min + 1) + min) * 4;
            int numberOfRotations = (rand.nextInt(max - min + 1) + min);
            for(int i=0 ; i<numberOfShuffels ; i++)
                    leftRotatebyOne();    
            for(int i=0 ; i<numberOfRotations ; i++){
                rotateMatrix(hard);
                rotateMatrix(easy);
                rotateMatrix(medium);
                rotateMatrix(solution);
                rotateMatrix(demo);
            }
                    
        }
        
        
	// returns the solution array
	public int[][] getSolution() {
		return solution;
	}

	// returns the initial filled-in numbers array
	public int[][] getEasy() {
                initial = easy;
		return easy;
	}

        
	public int[][] getMedium() {
                initial = medium;
		return medium;
	}
        
	public int[][] getHard() {
                initial = hard;
		return hard;
	}
        
	public int[][] getDemo() {
                initial = demo;
		return demo;
	}
        
        	// returns the player array
	public int[][] getPlayer() {
		return player;
	}
        
        public void resetPlayer(){
            for(int i=0 ; i<16 ; i++){
                    for(int j=0 ; j<16 ; j++){
                        player[i][j] = 69;
                    }
                }
        }
	// modifies a value in the player array
	public void modifyPlayer(int val, int row, int col) {
            if(initial[row][col] == 69){
                if(val >=0x0 && val <= 0xF) // only values from 0 to F inclusive are permitted
			player[row][col] = val;
		else // print out an error message
			System.out.println("Value passed to player falls out of range");
            }
        }
        
        public boolean checkForSuccess() {

		for(int row = 0; row<16; row++) {
			for(int col = 0; col<16; col++) { 
				
				if(initial[row][col] == 69) {
					if(player[row][col] != solution[row][col]) {
						return false;
					}
				}
			}
		}
		return true;
	}

        
    public void leftRotatebyOne()
    { 
        int i;
        int [] solution_tmp = solution[0]; 
        int [] easy_tmp = easy[0]; 
        int [] medium_tmp = medium[0]; 
        int [] hard_tmp = hard[0]; 
        int [] demo_tmp = demo[0];
        
        for (i = 0; i < 15; i++) {
            this.solution[i] = solution[i+1];
            this.easy[i] = easy[i + 1];
            this.medium[i] = medium[i + 1];
            this.hard[i] = hard[i + 1];
            this.demo[i] = demo[i + 1];
        }
             
        this.solution[i] = solution_tmp;
        this.easy[i] = easy_tmp;
        this.medium[i] = medium_tmp;
        this.hard[i] = hard_tmp;
        this.demo[i] = demo_tmp;
    } 
    
    void rotateMatrix(int mat[][]) 
    { 
        // Consider all squares one by one 
        for (int x = 0; x < 16 / 2; x++) 
        { 
            // Consider elements in group of 4 in  
            // current square 
            for (int y = x; y < 16-x-1; y++) 
            { 
                // store current cell in temp variable 
                int temp = mat[x][y]; 

                // move values from right to top 
                mat[x][y] = mat[y][16-1-x]; 

                // move values from bottom to right 
                mat[y][16-1-x] = mat[16-1-x][16-1-y]; 

                // move values from left to bottom 
                mat[16-1-x][16-1-y] = mat[16-1-y][x]; 

                // assign temp to left 
                mat[16-1-y][x] = temp; 
            } 
        } 
    } 
        
}
        
        



